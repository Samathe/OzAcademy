{
    "subjects": ["Информатика", "Математика"],
    "topics": {
        "Основы программирования": {
            "Введение в программирование": ["Что такое программирование?", "Основные понятия алгоритмов", "Блок-схемы"],
            "Основы Python": ["Установка Python", "Переменные и типы данных", "Операторы и выражения"],
            "Управляющие конструкции": ["Условные операторы (if-else)", "Циклы (for, while)", "Функции"]
        },
        "Структуры данных и алгоритмы": {
            "Базовые структуры данных": ["Массивы и списки", "Стеки и очереди", "Деревья и графы"],
            "Алгоритмы сортировки": ["Пузырьковая сортировка", "Сортировка вставками", "Быстрая сортировка"],
            "Алгоритмы поиска": ["Линейный поиск", "Бинарный поиск", "Поиск в ширину и глубину"]
        },
        "Веб-разработка": {
            "Frontend-разработка": ["HTML основы", "CSS основы", "JavaScript основы"],
            "Backend-разработка": ["Введение в серверную разработку", "Python Flask", "REST API"],
            "Базы данных": ["SQL основы", "NoSQL базы данных", "Проектирование баз данных"]
        },
        "Машинное обучение": {
            "Введение в ML": ["Что такое машинное обучение?", "Типы задач ML", "Основные библиотеки"],
            "Обработка данных": ["Основы Pandas", "Визуализация данных", "Предобработка данных"],
            "Модели ML": ["Линейная регрессия", "Классификация", "Основы нейронных сетей"]
        }
    },
    "quizzes": {
        "Структуры данных и алгоритмы": {
            "Алгоритмы сортировки": [
                {
                    "question": "Алгоритм сортировки, который меняет местами соседние элементы, если предыдущий элемент больше последующего элемента – это",
                    "options": [
                        "Bubble sort (пузырьковая сортировка)",
                        "Insertion sort (сортировка вставкой)",
                        "Quick sort (быстрая сортировка)",
                        "Selection sort (сортировка выбором)"
                    ],
                    "correct_index": 0,
                    "explanation": "Пузырьковая сортировка (Bubble sort) работает путем многократного прохода по списку, сравнивая соседние элементы и меняя их местами, если они находятся в неправильном порядке."
                },
                {
                    "question": "Какова временная сложность пузырьковой сортировки в худшем случае?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(n log n)",
                        "O(n²)"
                    ],
                    "correct_index": 3,
                    "explanation": "Временная сложность пузырьковой сортировки в худшем случае составляет O(n²), где n - количество элементов в массиве."
                }
            ],
            "Базовые структуры данных": [
                {
                    "question": "Какая структура данных работает по принципу LIFO (Last In, First Out)?",
                    "options": [
                        "Очередь (Queue)",
                        "Стек (Stack)",
                        "Связный список (Linked List)",
                        "Хеш-таблица (Hash Table)"
                    ],
                    "correct_index": 1,
                    "explanation": "Стек (Stack) работает по принципу LIFO - последний вошел, первый вышел."
                },
                {
                    "question": "Какая структура данных используется для представления иерархических отношений между элементами?",
                    "options": [
                        "Массив (Array)",
                        "Стек (Stack)",
                        "Дерево (Tree)",
                        "Хеш-таблица (Hash Table)"
                    ],
                    "correct_index": 2,
                    "explanation": "Дерево (Tree) - структура данных, которая используется для представления иерархических отношений между элементами."
                }
            ]
        },
        "Основы программирования": {
            "Основы Python": [
                {
                    "question": "Какой оператор используется для проверки равенства в Python?",
                    "options": [
                        "=",
                        "==",
                        "===",
                        ":="
                    ],
                    "correct_index": 1,
                    "explanation": "В Python оператор == используется для проверки равенства значений, а = для присваивания значений переменным."
                },
                {
                    "question": "Какой тип данных используется для хранения упорядоченной коллекции элементов в Python?",
                    "options": [
                        "Dictionary",
                        "Set",
                        "List",
                        "Tuple"
                    ],
                    "correct_index": 2,
                    "explanation": "List (список) в Python используется для хранения упорядоченной коллекции элементов, которые могут быть изменены."
                }
            ],
            "Управляющие конструкции": [
                {
                    "question": "Переменные, описанные внутри подпрограммы, называются",
                    "options": [
                        "локальными",
                        "формальными",
                        "фактическими",
                        "глобальными"
                    ],
                    "correct_index": 0,
                    "explanation": "Локальные переменные - это переменные, которые определены внутри функции или подпрограммы и доступны только внутри этой функции."
                },
                {
                    "question": "Какая конструкция в Python используется для обработки исключений?",
                    "options": [
                        "if-else",
                        "for-in",
                        "try-except",
                        "switch-case"
                    ],
                    "correct_index": 2,
                    "explanation": "Конструкция try-except используется в Python для обработки исключений, позволяя программе продолжать работу даже при возникновении ошибок."
                }
            ]
        },
        "Веб-разработка": {
            "Frontend-разработка": [
                {
                    "question": "Объектно-ориентированный язык, широко используемый в качестве языка сценариев для интерактивного создания web-страниц в браузерах, называется",
                    "options": [
                        "Java",
                        "PHP",
                        "JavaScript",
                        "VisualBasic"
                    ],
                    "correct_index": 2,
                    "explanation": "JavaScript - объектно-ориентированный язык программирования, который широко используется для создания интерактивных веб-страниц в браузерах."
                },
                {
                    "question": "Какой язык используется для описания стилей веб-страниц?",
                    "options": [
                        "HTML",
                        "CSS",
                        "JavaScript",
                        "PHP"
                    ],
                    "correct_index": 1,
                    "explanation": "CSS (Cascading Style Sheets) используется для описания внешнего вида и форматирования HTML-документов."
                }
            ]
        }
    },
    "assignments": {
        "Основы программирования": {
            "Основы Python": [
                {
                    "title": "Калькулятор",
                    "description": "Напишите простой калькулятор на Python, который может выполнять сложение, вычитание, умножение и деление двух чисел.",
                    "example": "def calculator(a, b, operation):\n    if operation == '+':\n        return a + b\n    # Дополните функцию другими операциями",
                    "tests": [
                        {"input": "calculator(5, 3, '+')", "expected": 8},
                        {"input": "calculator(10, 2, '-')", "expected": 8},
                        {"input": "calculator(4, 5, '*')", "expected": 20},
                        {"input": "calculator(9, 3, '/')", "expected": 3}
                    ]
                }
            ],
            "Управляющие конструкции": [
                {
                    "title": "Проверка простого числа",
                    "description": "Напишите функцию, которая проверяет, является ли число простым.",
                    "example": "def is_prime(n):\n    # Ваш код здесь\n    pass",
                    "tests": [
                        {"input": "is_prime(7)", "expected": true},
                        {"input": "is_prime(4)", "expected": false},
                        {"input": "is_prime(1)", "expected": false},
                        {"input": "is_prime(13)", "expected": true}
                    ]
                }
            ]
        },
        "Структуры данных и алгоритмы": {
            "Алгоритмы сортировки": [
                {
                    "title": "Реализация пузырьковой сортировки",
                    "description": "Реализуйте алгоритм пузырьковой сортировки для списка целых чисел.",
                    "example": "def bubble_sort(arr):\n    # Ваш код здесь\n    return arr",
                    "tests": [
                        {"input": "bubble_sort([5, 3, 8, 1, 2])", "expected": [1, 2, 3, 5, 8]},
                        {"input": "bubble_sort([9, 7, 5, 3, 1])", "expected": [1, 3, 5, 7, 9]},
                        {"input": "bubble_sort([1, 2, 3, 4, 5])", "expected": [1, 2, 3, 4, 5]}
                    ]
                }
            ]
        }
    },
    "lessons_content": {
        "Основы программирования": {
            "Введение в программирование": {
                "Что такое программирование?": {
                    "content": "Программирование — это процесс создания программ, то есть наборов инструкций, которые выполняются компьютером для решения определенных задач. Программирование включает в себя анализ проблемы, разработку решения, написание кода и его тестирование.",
                    "video_url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                    "code_example": "# Это простейшая программа на Python\nprint('Привет, мир!')"
                }
            },
            "Основы Python": {
                "Переменные и типы данных": {
                    "content": "В Python переменные являются контейнерами для хранения данных. В отличие от других языков программирования, Python не требует объявления типа переменной. Основные типы данных включают числа (int, float), строки (str), списки (list), кортежи (tuple), словари (dict) и множества (set).",
                    "video_url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                    "code_example": "# Примеры типов данных в Python\nage = 25  # целое число (int)\npi = 3.14159  # число с плавающей точкой (float)\nname = 'Alice'  # строка (str)\nfruits = ['apple', 'banana', 'cherry']  # список (list)\nperson = {'name': 'Bob', 'age': 30}  # словарь (dict)"
                }
            }
        },
        "Структуры данных и алгоритмы": {
            "Алгоритмы сортировки": {
                "Пузырьковая сортировка": {
                    "content": "Пузырьковая сортировка (Bubble Sort) — это простой алгоритм сортировки, который многократно проходит по списку, сравнивает соседние элементы и меняет их местами, если они находятся в неправильном порядке. Процесс повторяется до тех пор, пока список не будет полностью отсортирован. Хотя пузырьковая сортировка проста для понимания и реализации, она неэффективна для больших наборов данных с временной сложностью O(n²).",
                    "video_url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                    "code_example": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        # Последние i элементов уже на своих местах\n        for j in range(0, n-i-1):\n            # Проход по массиву от 0 до n-i-1\n            # Если текущий элемент больше следующего, меняем их местами\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# Пример использования\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nsorted_numbers = bubble_sort(numbers)\nprint(sorted_numbers)"
                }
            }
        }
    }
}