import streamlit as st
import json
import pandas as pd
import random
import os
from datetime import datetime
import requests

# Page configuration
st.set_page_config(
    page_title="ExamLingo - AI Content Generator",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Custom CSS
st.markdown("""
<style>
    .main {
        background-color: #111b2b;
    }
    
    p, li, label, div {
        color: #ffffff !important;
    }
    
    .stButton button {
        background-color: #58cc02;
        color: white;
        font-weight: bold;
        border-radius: 12px;
        padding: 12px 20px;
        border: none;
        box-shadow: 0 4px 0 #46a302;
        font-size: 16px;
        transition: all 0.3s ease;
    }
    .stButton button:hover {
        background-color: #61dd00;
        box-shadow: 0 2px 0 #46a302;
        transform: translateY(2px);
    }
    
    .special-button button {
        background-color: #a560ff;
        box-shadow: 0 4px 0 #8548cc;
    }
    
    .output-container {
        background-color: #ffffff10;
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 20px;
        margin: 20px 0;
        border-left: 5px solid #58cc02;
    }
    
    .json-output {
        font-family: monospace;
        white-space: pre-wrap;
        background-color: #1e2a3a;
        padding: 15px;
        border-radius: 5px;
        overflow: auto;
        max-height: 500px;
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    .stTabs [data-baseweb="tab"] {
        background-color: #2b3d5b;
        border-radius: 10px 10px 0 0;
        padding: 10px 20px;
        color: white;
    }
    .stTabs [aria-selected="true"] {
        background-color: #58cc02;
    }
</style>
""", unsafe_allow_html=True)

# Load prompt templates
def load_prompt_templates():
    return {
        "math": """
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ "{—Ç–µ–º–∞}" —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {—Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 5} –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å).
2. –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏.
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è.
4. –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {—Ç–∏–ø_–∑–∞–¥–∞–Ω–∏—è: —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–±–æ—Ä, —á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ}.
5. –î–æ–±–∞–≤—å 2-3 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "question": "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
  "type": "—Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞",
  "parameters": {
    "param1": {"min": –∑–Ω–∞—á–µ–Ω–∏–µ, "max": –∑–Ω–∞—á–µ–Ω–∏–µ, "step": –∑–Ω–∞—á–µ–Ω–∏–µ},
    ...
  },
  "options": ["–≤–∞—Ä–∏–∞–Ω—Ç1", "–≤–∞—Ä–∏–∞–Ω—Ç2", ...],
  "correctAnswer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å",
  "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "wrongAnswersExplanation": {
    "–≤–∞—Ä–∏–∞–Ω—Ç1": "–ø–æ—á–µ–º—É –Ω–µ–≤–µ—Ä–Ω–æ",
    ...
  },
  "difficulty": —á–∏—Å–ª–æ,
  "tags": ["—Ç–µ–≥1", "—Ç–µ–≥2", ...]
}
""",
        "computer_science": """
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –ø–æ —Ç–µ–º–µ "{—Ç–µ–º–∞}" —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {—Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 5} –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {—Ç–∏–ø_–∑–∞–¥–∞–Ω–∏—è: —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–±–æ—Ä, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤}.
2. –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–¥, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —à–∞–±–ª–æ–Ω –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
3. –£–∫–∞–∂–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏.
4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.
5. –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {—è–∑—ã–∫}.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "question": "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
  "type": "—Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞",
  "programmingLanguage": "—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
  "initialCode": "–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)",
  "testCases": [
    {"input": "–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "expectedOutput": "–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"},
    ...
  ],
  "solution": "—Ä–µ—à–µ–Ω–∏–µ",
  "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "difficulty": —á–∏—Å–ª–æ,
  "tags": ["—Ç–µ–≥1", "—Ç–µ–≥2", ...],
  "hints": ["–ø–æ–¥—Å–∫–∞–∑–∫–∞1", "–ø–æ–¥—Å–∫–∞–∑–∫–∞2", ...]
}
""",
        "code_analysis": """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–∞ —è–∑—ã–∫–µ {—è–∑—ã–∫}, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: 

"{—Ç–µ–∫—Å—Ç_–∑–∞–¥–∞—á–∏}"

–ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
```
{–∫–æ–¥_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}
```

–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
{–æ–∂–∏–¥–∞–µ–º–æ–µ_–ø–æ–≤–µ–¥–µ–Ω–∏–µ}

–í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è (–ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ—Å—Ç—ã).
2. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ (1-10).
3. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –æ—à–∏–±–æ–∫.
4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, —Å—Ç–∏–ª—å).
5. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "isCorrect": true/false,
  "codeQuality": —á–∏—Å–ª–æ,
  "issues": [
    {"type": "—Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "lineNumber": —á–∏—Å–ª–æ, "severity": "–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å"},
    ...
  ],
  "improvements": [
    {"suggestion": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "reason": "–ø—Ä–∏—á–∏–Ω–∞", "example": "–ø—Ä–∏–º–µ—Ä"},
    ...
  ],
  "learning": [
    {"topic": "—Ç–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è", "reason": "–ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ"},
    ...
  ],
  "feedback": "–æ–±—â–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
  "nextSteps": "—á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É–µ—Ç –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ"
}
""",
        "adaptive_assessment": """
–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ü–µ–Ω–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–º—ã "{—Ç–µ–º–∞}" –∏ –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.

–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤:
{
  "questions": [
    {
      "id": "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
      "difficulty": —á–∏—Å–ª–æ,
      "topic": "—Ç–µ–º–∞",
      "subtopic": "–ø–æ–¥—Ç–µ–º–∞",
      "userAnswer": "–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "isCorrect": true/false,
      "timeSpent": —á–∏—Å–ª–æ_—Å–µ–∫—É–Ω–¥
    },
    ...
  ]
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ –ø–æ–¥—Ç–µ–º–∞–º (1-5).
2. –û–ø—Ä–µ–¥–µ–ª–∏ –æ–±–ª–∞—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è.
3. –í—ã–±–µ—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (ID –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤).
4. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "skillAssessment": {
    "—Ç–µ–º–∞1": —á–∏—Å–ª–æ,
    "—Ç–µ–º–∞2": —á–∏—Å–ª–æ,
    ...
  },
  "weakAreas": ["–æ–±–ª–∞—Å—Ç—å1", "–æ–±–ª–∞—Å—Ç—å2", ...],
  "nextQuestionId": "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
  "nextQuestionDifficulty": —á–∏—Å–ª–æ,
  "nextQuestionTopic": "—Ç–µ–º–∞",
  "improvement": [
    {"area": "–æ–±–ª–∞—Å—Ç—å", "suggestion": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"},
    ...
  ],
  "confidence": —á–∏—Å–ª–æ,
  "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
}
""",
        "personalized_recommendations": """
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã "{—Ç–µ–º–∞}".

–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{
  "skills": {
    "—Ç–µ–º–∞1": —á–∏—Å–ª–æ,
    "—Ç–µ–º–∞2": —á–∏—Å–ª–æ,
    ...
  },
  "learningStyle": "—Å—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è",
  "completedLevels": ["—É—Ä–æ–≤–µ–Ω—å1", "—É—Ä–æ–≤–µ–Ω—å2", ...],
  "struggles": ["–ø—Ä–æ–±–ª–µ–º–∞1", "–ø—Ä–æ–±–ª–µ–º–∞2", ...],
  "averageTimePerQuestion": —á–∏—Å–ª–æ_—Å–µ–∫—É–Ω–¥,
  "strengths": ["—Å–∏–ª—å–Ω–∞—è_—Å—Ç–æ—Ä–æ–Ω–∞1", "—Å–∏–ª—å–Ω–∞—è_—Å—Ç–æ—Ä–æ–Ω–∞2", ...],
  "preferences": ["–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ1", "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ2", ...]
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü—Ä–µ–¥–ª–æ–∂–∏ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.
2. –£—á–∏—Ç—ã–≤–∞–π —Å—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
3. –û—Å–Ω–æ–≤—ã–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç–∞—Ö.
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–∑—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ–º.
5. –î–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "recommendations": [
    {
      "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
      "description": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
      "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
      "priority": —á–∏—Å–ª–æ,
      "actionItem": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    },
    ...
  ],
  "learningPath": [
    {"topic": "—Ç–µ–º–∞", "reason": "–ø—Ä–∏—á–∏–Ω–∞"},
    ...
  ],
  "motivation": "–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
  "estimatedImprovementTime": "–æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è",
  "potentialOutcome": "–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º"
}
""",
        "performance_prediction": """
–ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –µ–≥–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ {–ø–µ—Ä–∏–æ–¥} –¥–Ω–µ–π –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã "{—Ç–µ–º–∞}".

–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è:
{
  "dailyProgress": [
    {"date": "–¥–∞—Ç–∞", "completedTasks": —á–∏—Å–ª–æ, "correctAnswers": —á–∏—Å–ª–æ, "timeSpent": —á–∏—Å–ª–æ_–º–∏–Ω—É—Ç},
    ...
  ],
  "skillGrowth": [
    {"skill": "–Ω–∞–≤—ã–∫", "initialLevel": —á–∏—Å–ª–æ, "currentLevel": —á–∏—Å–ª–æ, "daysToAchieve": —á–∏—Å–ª–æ},
    ...
  ],
  "consistency": —á–∏—Å–ª–æ,
  "currentStreak": —á–∏—Å–ª–æ_–¥–Ω–µ–π,
  "averageSessionLength": —á–∏—Å–ª–æ_–º–∏–Ω—É—Ç
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
2. –û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è.
3. –í—ã—è–≤–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "dailyPredictions": [
    {"day": —á–∏—Å–ª–æ, "expectedTasks": —á–∏—Å–ª–æ, "expectedCorrectRate": —á–∏—Å–ª–æ, "skillLevel": —á–∏—Å–ª–æ},
    ...
  ],
  "levelUpPrediction": {
    "probability": —á–∏—Å–ª–æ,
    "estimatedDays": —á–∏—Å–ª–æ,
    "confidence": —á–∏—Å–ª–æ
  },
  "risks": [
    {"risk": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏—Å–∫–∞", "probability": —á–∏—Å–ª–æ, "impact": —á–∏—Å–ª–æ, "mitigation": "—Å–ø–æ—Å–æ–± —Å–º—è–≥—á–µ–Ω–∏—è"},
    ...
  ],
  "optimizationSuggestions": [
    {"suggestion": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "expectedImpact": —á–∏—Å–ª–æ, "effort": —á–∏—Å–ª–æ},
    ...
  ],
  "confidenceScore": —á–∏—Å–ª–æ,
  "predictionMethod": "–æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
}
""",
        "hints_generator": """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–µ—Ä–∏—é –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å—Ä–∞–∑—É –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

–ó–∞–¥–∞—á–∞:
"{—Ç–µ–∫—Å—Ç_–∑–∞–¥–∞—á–∏}"

–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"{–¥–µ–π—Å—Ç–≤–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}"

–°–ª–æ–∂–Ω–æ—Å—Ç—å: {1-5}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫: {—á–∏—Å–ª–æ}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π 3 —É—Ä–æ–≤–Ω—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.
2. –ü–µ—Ä–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –º—ã—à–ª–µ–Ω–∏–µ, –Ω–µ –¥–∞–≤–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
3. –í—Ç–æ—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–ª—é—á–µ–≤–æ–π –º–µ—Ç–æ–¥ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª—É.
4. –¢—Ä–µ—Ç—å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
5. –ê–¥–∞–ø—Ç–∏—Ä—É–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "hints": [
    {
      "level": 1,
      "text": "–ª–µ–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞",
      "reveals": "—á—Ç–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    },
    {
      "level": 2,
      "text": "—Å—Ä–µ–¥–Ω—è—è –ø–æ–¥—Å–∫–∞–∑–∫–∞",
      "reveals": "—á—Ç–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    },
    {
      "level": 3,
      "text": "–¥–µ—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞",
      "reveals": "—á—Ç–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    }
  ],
  "recommendedHintLevel": —á–∏—Å–ª–æ,
  "conceptsToReview": ["–∫–æ–Ω—Ü–µ–ø—Ü–∏—è1", "–∫–æ–Ω—Ü–µ–ø—Ü–∏—è2", ...],
  "encouragement": "–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
}
""",
        "error_patterns": """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–¥–∞—á–∞—Ö –ø–æ —Ç–µ–º–µ "{—Ç–µ–º–∞}" –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏.

–ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫:
{
  "errors": [
    {
      "questionId": "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
      "topic": "—Ç–µ–º–∞",
      "subtopic": "–ø–æ–¥—Ç–µ–º–∞",
      "userAnswer": "–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "correctAnswer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
      "errorType": "—Ç–∏–ø –æ—à–∏–±–∫–∏",
      "timestamp": "–≤—Ä–µ–º—è"
    },
    ...
  ]
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –í—ã—è–≤–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–∏–ø—ã –æ—à–∏–±–æ–∫.
2. –û–ø—Ä–µ–¥–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã.
3. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ü–µ–ª–µ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤.
4. –û—Ü–µ–Ω–∏ –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–º—ã.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON:
{
  "errorPatterns": [
    {
      "pattern": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞",
      "frequency": —á–∏—Å–ª–æ,
      "subtopics": ["–ø–æ–¥—Ç–µ–º–∞1", "–ø–æ–¥—Ç–µ–º–∞2", ...],
      "examples": ["–ø—Ä–∏–º–µ—Ä1", "–ø—Ä–∏–º–µ—Ä2", ...]
    },
    ...
  ],
  "conceptualGaps": [
    {
      "concept": "–∫–æ–Ω—Ü–µ–ø—Ü–∏—è",
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞",
      "confidence": —á–∏—Å–ª–æ,
      "relatedErrors": ["–æ—à–∏–±–∫–∞1", "–æ—à–∏–±–∫–∞2", ...]
    },
    ...
  ],
  "targetedExercises": [
    {
      "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
      "targetGap": "—Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–±–µ–ª",
      "difficulty": —á–∏—Å–ª–æ
    },
    ...
  ],
  "overallAssessment": {
    "understanding": —á–∏—Å–ª–æ,
    "strengths": ["—Å–∏–ª—å–Ω–∞—è_—Å—Ç–æ—Ä–æ–Ω–∞1", "—Å–∏–ª—å–Ω–∞—è_—Å—Ç–æ—Ä–æ–Ω–∞2", ...],
    "priorityGaps": ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π_–ø—Ä–æ–±–µ–ª1", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π_–ø—Ä–æ–±–µ–ª2", ...]
  },
  "recommendedAction": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
}
"""
    }

# Initialize session state
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = ""

if 'prompt_template' not in st.session_state:
    st.session_state.prompt_template = ""

if 'api_key' not in st.session_state:
    st.session_state.api_key = ""

if 'history' not in st.session_state:
    st.session_state.history = []

# Simulate AI API call
def generate_ai_content(prompt, api_key):
    # This is a mock function - in a real app, you would call an actual AI API here
    # For demonstration purposes, we'll just return a sample response
    
    if "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ" in prompt:
        return json.dumps({
            "question": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: ax¬≤ + bx + c = 0, –≥–¥–µ a = 2, b = -5, c = 3",
            "type": "—Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–±–æ—Ä",
            "parameters": {
                "a": {"min": 1, "max": 5, "step": 1},
                "b": {"min": -10, "max": 10, "step": 1},
                "c": {"min": -5, "max": 5, "step": 1}
            },
            "options": ["x‚ÇÅ = 1, x‚ÇÇ = 1.5", "x‚ÇÅ = 0.5, x‚ÇÇ = 3", "x‚ÇÅ = 2, x‚ÇÇ = 0.75", "x‚ÇÅ = 1.5, x‚ÇÇ = 1"],
            "correctAnswer": "x‚ÇÅ = 1.5, x‚ÇÇ = 1",
            "explanation": "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞ D = b¬≤ - 4ac = (-5)¬≤ - 4¬∑2¬∑3 = 25 - 24 = 1.\n–ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–∏: x‚ÇÅ = (-b + ‚àöD)/2a = (5 + 1)/4 = 1.5, x‚ÇÇ = (-b - ‚àöD)/2a = (5 - 1)/4 = 1",
            "wrongAnswersExplanation": {
                "x‚ÇÅ = 1, x‚ÇÇ = 1.5": "–ù–µ–≤–µ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è",
                "x‚ÇÅ = 0.5, x‚ÇÇ = 3": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ—Ä–Ω–µ–π",
                "x‚ÇÅ = 2, x‚ÇÇ = 0.75": "–û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞"
            },
            "difficulty": 3,
            "tags": ["–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–∞–ª–≥–µ–±—Ä–∞", "–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç"]
        }, indent=2, ensure_ascii=False)
    elif "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ" in prompt:
        return json.dumps({
            "question": "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–π–¥–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ n —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ—à–µ—Ç–∞ –≠—Ä–∞—Ç–æ—Å—Ñ–µ–Ω–∞",
            "type": "–Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞",
            "programmingLanguage": "Python",
            "initialCode": "def sieve_of_eratosthenes(n):\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    pass\n\n# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\nprint(sieve_of_eratosthenes(30))",
            "testCases": [
                {"input": "10", "expectedOutput": "[2, 3, 5, 7]"},
                {"input": "20", "expectedOutput": "[2, 3, 5, 7, 11, 13, 17, 19]"},
                {"input": "30", "expectedOutput": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"}
            ],
            "solution": "def sieve_of_eratosthenes(n):\n    primes = []\n    sieve = [True] * (n + 1)\n    for p in range(2, n + 1):\n        if sieve[p]:\n            primes.append(p)\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return primes",
            "explanation": "–ê–ª–≥–æ—Ä–∏—Ç–º –≠—Ä–∞—Ç–æ—Å—Ñ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—É—Ç–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–º–µ—Ç–∞–Ω–∏—è —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫—Ä–∞—Ç–Ω—ã–º–∏ –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–∞–º. –ú—ã —Å–æ–∑–¥–∞–µ–º –±—É–ª–µ–≤ –º–∞—Å—Å–∏–≤ sieve —Ä–∞–∑–º–µ—Ä–æ–º n+1, –≥–¥–µ sieve[i] –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ i –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ (True). –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ p –æ—Ç 2 –¥–æ n, –µ—Å–ª–∏ –æ–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ, –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ primes –∏ –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –µ–≥–æ –∫—Ä–∞—Ç–Ω—ã–µ –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ (False).",
            "difficulty": 4,
            "tags": ["–∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞", "—Ä–µ—à–µ—Ç–æ –≠—Ä–∞—Ç–æ—Å—Ñ–µ–Ω–∞", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
            "hints": [
                "–°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª",
                "–ù–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ (2) –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ –µ–≥–æ –∫—Ä–∞—Ç–Ω—ã–µ –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ",
                "–î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞—á–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É —Å p*p, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –º–µ–Ω—å—à–∏–µ –∫—Ä–∞—Ç–Ω—ã–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã"
            ]
        }, indent=2, ensure_ascii=False)
    else:
        # Generic response for other prompt types
        return json.dumps({
            "message": "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç API.",
            "prompt_received": prompt,
            "timestamp": datetime.now().isoformat()
        }, indent=2, ensure_ascii=False)

# Main app function
def main():
    st.title("ü§ñ ExamLingo - AI Content Generator")
    st.markdown("### –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±—É—á–∞—é—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    
    # Sidebar for API settings
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        api_key = st.text_input("API –ö–ª—é—á (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ)", type="password")
        st.session_state.api_key = api_key
        
        st.header("–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
        if st.session_state.history:
            for idx, item in enumerate(st.session_state.history[-5:]):
                if st.button(f"{item['type']} - {item['timestamp']}", key=f"history_{idx}"):
                    st.session_state.generated_content = item["content"]
                    st.session_state.prompt_template = item["template"]
        
        st.markdown("---")
        st.markdown("¬© 2025 ExamLingo")
    
    # Main content area
    templates = load_prompt_templates()
    
    # Tabs for different prompt types
    tabs = st.tabs([
        "üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", 
        "üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", 
        "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", 
        "üìä –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞",
        "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "üìà –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏",
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏",
        "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫"
    ])
    
    with tabs[0]:  # Math tab
        st.header("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π")
        math_topic = st.text_input("–¢–µ–º–∞ –∑–∞–¥–∞–Ω–∏—è", value="–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", key="math_topic")
        math_difficulty = st.slider("–°–ª–æ–∂–Ω–æ—Å—Ç—å", 1, 5, 3, key="math_difficulty")
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", key="generate_math"):
            prompt = templates["math"].replace("{—Ç–µ–º–∞}", math_topic).replace("{—Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 5}", str(math_difficulty))
            st.session_state.prompt_template = prompt
            
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è..."):
                response = generate_ai_content(prompt, st.session_state.api_key)
                st.session_state.generated_content = response
                
                # Add to history
                st.session_state.history.append({
                    "type": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                    "template": prompt,
                    "content": response,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                })
                
    with tabs[1]:  # Computer Science tab
        st.header("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏–π –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ")
        cs_topic = st.text_input("–¢–µ–º–∞ –∑–∞–¥–∞–Ω–∏—è", value="–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", key="cs_topic")
        cs_difficulty = st.slider("–°–ª–æ–∂–Ω–æ—Å—Ç—å", 1, 5, 3, key="cs_difficulty")
        cs_language = st.selectbox("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", ["Python", "JavaScript", "Java", "C++", "C#"], key="cs_language")
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", key="generate_cs"):
            prompt = templates["computer_science"]\
                .replace("{—Ç–µ–º–∞}", cs_topic)\
                .replace("{—Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 5}", str(cs_difficulty))\
                .replace("{—è–∑—ã–∫}", cs_language)
            st.session_state.prompt_template = prompt
            
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è..."):
                response = generate_ai_content(prompt, st.session_state.api_key)
                st.session_state.generated_content = response
                
                # Add to history
                st.session_state.history.append({
                    "type": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                    "template": prompt,
                    "content": response,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                })
    
    with tabs[2]:  # Code Analysis tab
        st.header("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
        ca_language = st.selectbox("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", ["Python", "JavaScript", "Java", "C++", "C#"], key="ca_language")
        ca_task = st.text_area("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏", value="–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å –¥–≤—É—Ö —á–∏—Å–µ–ª", key="ca_task")
        ca_code = st.text_area("–ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", key="ca_code", height=200)
        ca_expected = st.text_area("–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", value="–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ù–û–î –¥–≤—É—Ö —á–∏—Å–µ–ª", key="ca_expected")
        
        if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", key="analyze_code"):
            prompt = templates["code_analysis"]\
                .replace("{—è–∑—ã–∫}", ca_language)\
                .replace("{—Ç–µ–∫—Å—Ç_–∑–∞–¥–∞—á–∏}", ca_task)\
                .replace("{–∫–æ–¥_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}", ca_code)\
                .replace("{–æ–∂–∏–¥–∞–µ–º–æ–µ_–ø–æ–≤–µ–¥–µ–Ω–∏–µ}", ca_expected)
            st.session_state.prompt_template = prompt
            
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞..."):
                response = generate_ai_content(prompt, st.session_state.api_key)
                st.session_state.generated_content = response
                
                # Add to history
                st.session_state.history.append({
                    "type": "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
                    "template": prompt,
                    "content": response,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                })
    
    # Display output
    if st.session_state.generated_content:
        st.markdown("---")
        st.header("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        
        try:
            # Try to parse as JSON for pretty formatting
            parsed = json.loads(st.session_state.generated_content)
            st.markdown('<div class="output-container">', unsafe_allow_html=True)
            st.json(parsed)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Export options
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON"):
                    # In a real app, this would use JavaScript to copy to clipboard
                    st.success("JSON —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            with col2:
                if st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å JSON",
                    data=st.session_state.generated_content,
                    file_name=f"examlingo_content_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                ):
                    pass
                    
        except json.JSONDecodeError:
            # If not valid JSON, display as text
            st.markdown('<div class="output-container">', unsafe_allow_html=True)
            st.markdown('<div class="json-output">' + st.session_state.generated_content + '</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
    
    # Display used prompt template (collapsible)
    if st.session_state.prompt_template:
        with st.expander("